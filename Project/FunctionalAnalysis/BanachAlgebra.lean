import Mathlib.Analysis.Complex.Basic

class BanachSpace (ùïú H : Type*) [RCLike ùïú] extends SeminormedAddCommGroup H, NormedSpace ùïú H, CompleteSpace H
class BanachAlgebra (A : Type*) extends BanachSpace ‚ÑÇ A, NonUnitalNormedRing A, SMulCommClass ‚ÑÇ A A, IsScalarTower ‚ÑÇ A A

variable {A : Type*} [BanachAlgebra A]
variable {x y z : A}
variable {c : ‚ÑÇ}

lemma _mul_assoc: (x * y) * z = x * (y * z) := mul_assoc x y z
lemma _mul_add : x * (y + z) = x * y + x * z := mul_add x y z
lemma _add_mul : (x + y) * z = x * z + y * z := add_mul x y z
lemma _smul_mul : c ‚Ä¢ (x * y) = (c ‚Ä¢ x) * y := (smul_mul_assoc c x y).symm
lemma _mul_smul : c ‚Ä¢ (x * y) = x * (c ‚Ä¢ y) := (mul_smul_comm c x y).symm
lemma _norm_mul_le : ‚Äñx * y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ := norm_mul_le x y
